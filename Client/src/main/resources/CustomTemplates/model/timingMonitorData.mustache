package com.Group3.monitor.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;
import javax.validation.Valid;
import javax.validation.constraints.*;

/**
 * Contain the required data, that is needed to check timing constraints
 */
@ApiModel(description = "Contain the required data, that is needed to check timing constraints")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-02-25T15:19:36.325723300+01:00[Europe/Copenhagen]")
public class TimingMonitorData   {
  @JsonProperty("Timestamp")
  @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME)
  private OffsetDateTime timestamp;

  @JsonProperty("SenderID")
  private Long senderID;

  @JsonProperty("TargetEndpoint")
  private String targetEndpoint;

  @JsonProperty("EventID")
  private Long eventID;

  /**
   * Describes the event that triggered the generation of a timing event
   */
  public enum EventCodeEnum {
    SENDREQUEST("SendRequest"),

    RECEIVERESPONSE("ReceiveResponse"),

    RECEIVEREQUEST("ReceiveRequest"),

    SENDRESPONSE("SendResponse");

    private String value;

    EventCodeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EventCodeEnum fromValue(String value) {
      for (EventCodeEnum b : EventCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  @JsonProperty("EventCode")
  private EventCodeEnum eventCode;

  public TimingMonitorData timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * The timestamp of the triggering a event
   * @return timestamp
  */
  @ApiModelProperty(required = true, value = "The timestamp of the triggering a event")
  @NotNull

  @Valid

  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }

  public TimingMonitorData senderID(Long senderID) {
    this.senderID = senderID;
    return this;
  }

  /**
   * The ID of the sender of the monitoring data
   * @return senderID
  */
  @ApiModelProperty(example = "21", required = true, value = "The ID of the sender of the monitoring data")
  @NotNull


  public Long getSenderID() {
    return senderID;
  }

  public void setSenderID(Long senderID) {
    this.senderID = senderID;
  }

  public TimingMonitorData targetEndpoint(String targetEndpoint) {
    this.targetEndpoint = targetEndpoint;
    return this;
  }

  /**
   * The target endpoint of a client side request
   * @return targetEndpoint
  */
  @ApiModelProperty(example = "/example/target/endpoint", value = "The target endpoint of a client side request")


  public String getTargetEndpoint() {
    return targetEndpoint;
  }

  public void setTargetEndpoint(String targetEndpoint) {
    this.targetEndpoint = targetEndpoint;
  }

  public TimingMonitorData eventID(Long eventID) {
    this.eventID = eventID;
    return this;
  }

  /**
   * The unique ID of the event chain
   * @return eventID
  */
  @ApiModelProperty(example = "57", required = true, value = "The unique ID of the event chain")
  @NotNull


  public Long getEventID() {
    return eventID;
  }

  public void setEventID(Long eventID) {
    this.eventID = eventID;
  }

  public TimingMonitorData eventCode(EventCodeEnum eventCode) {
    this.eventCode = eventCode;
    return this;
  }

  /**
   * Describes the event that triggered the generation of a timing event
   * @return eventCode
  */
  @ApiModelProperty(example = "SendRequest", required = true, value = "Describes the event that triggered the generation of a timing event")
  @NotNull


  public EventCodeEnum getEventCode() {
    return eventCode;
  }

  public void setEventCode(EventCodeEnum eventCode) {
    this.eventCode = eventCode;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimingMonitorData timingMonitorData = (TimingMonitorData) o;
    return Objects.equals(this.timestamp, timingMonitorData.timestamp) &&
        Objects.equals(this.senderID, timingMonitorData.senderID) &&
        Objects.equals(this.targetEndpoint, timingMonitorData.targetEndpoint) &&
        Objects.equals(this.eventID, timingMonitorData.eventID) &&
        Objects.equals(this.eventCode, timingMonitorData.eventCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timestamp, senderID, targetEndpoint, eventID, eventCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimingMonitorData {\n");

    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    senderID: ").append(toIndentedString(senderID)).append("\n");
    sb.append("    targetEndpoint: ").append(toIndentedString(targetEndpoint)).append("\n");
    sb.append("    eventID: ").append(toIndentedString(eventID)).append("\n");
    sb.append("    eventCode: ").append(toIndentedString(eventCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

