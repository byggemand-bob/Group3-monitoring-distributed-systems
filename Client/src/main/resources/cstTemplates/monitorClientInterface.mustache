package com.Group3.monitor.client;

import com.Group3.monitor.configuration.ConfigurationManager;
import com.Group3.monitor.api.MonitorApi;
import com.Group3.monitor.model.TimingMonitorData;
import com.Group3.monitor.model.TimingMonitorData.EventCodeEnum;

import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;

import java.time.OffsetDateTime;

import javax.annotation.Nullable;

import java.util.concurrent.atomic.AtomicLong;
import java.util.regex.Pattern;

public class MonitorClientInterface {
    private ApiClient client;
    private MonitorApi MonitorClient;
    private String monitorURL;
    private static AtomicLong eventIDSequence = new AtomicLong(1L);
    private static final long senderID = ConfigurationManager.getInstance().getPropertyAsLong(ConfigurationManager.getInstance().IDProp);

    public MonitorClientInterface(){
    	monitorURL = ConfigurationManager.getInstance().getProperty(ConfigurationManager.getInstance().monitorServerAddressProp);
    	client = new ApiClient();
        ValidateAndSetMonitorIP(monitorURL);
        MonitorClient = new MonitorApi(client);
    }

    private void ValidateAndSetMonitorIP(String MonitorIP){
        if (Pattern.matches("^http://\\d+.\\d+.\\d+.\\d+:\\d+$", MonitorIP)) {
            client.setBasePath(MonitorIP);
        } else if(Pattern.matches("^\\d+.\\d+.\\d+.\\d+:\\d+$", MonitorIP)){
            client.setBasePath("http://" + MonitorIP);
        } else {
        	String msg = String.format("IP address defined in configuration property <%s> is malformed, please check...\n"+
									   "Properties found at <%s>",
									   ConfigurationManager.getInstance().monitorServerAddressProp, 
									   ConfigurationManager.getInstance().getPropertiesPath());
        	throw new RuntimeException(msg);
        }
    }

    private void addMonitorData(long eventID, @Nullable String TargetEndPoint, EventCodeEnum eventCode) throws ApiException {
        TimingMonitorData timingMonitorData = new TimingMonitorData();
        timingMonitorData.setEventCode(eventCode);
        timingMonitorData.setEventID(eventID);
        timingMonitorData.setSenderID(senderID);
        timingMonitorData.timestamp(OffsetDateTime.now());
        if(TargetEndPoint != null){
            timingMonitorData.setTargetEndpoint(TargetEndPoint);
        }

        MonitorClient.addMonitorData(timingMonitorData);
    }
    
    public long queueMonitorData(@Nullable String targetEndPoint, EventCodeEnum eventCode) throws ApiException {
    	long eventID = getNextEventID();
    	addMonitorData(eventID, targetEndPoint, eventCode);
    	return eventID;
    }
    
    public long queueMonitorData(long eventID, @Nullable String targetEndPoint, EventCodeEnum eventCode) throws ApiException {
    	addMonitorData(eventID, targetEndPoint, eventCode);
    	return eventID;
    }
    
    private long getNextEventID() {
    	return eventIDSequence.getAndIncrement();
    }
}
