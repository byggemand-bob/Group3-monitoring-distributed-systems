/*
 * Monitor Communication
 * This is a specification for the communication for the monitor system
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Contain information about errors
 */
@ApiModel(description = "Contain information about errors")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-04-30T15:02:53.637789400+02:00[Europe/Paris]")
public class ErrorData {
  public static final String SERIALIZED_NAME_TIMESTAMP = "Timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_SENDER_I_D = "SenderID";
  @SerializedName(SERIALIZED_NAME_SENDER_I_D)
  private Long senderID;

  public static final String SERIALIZED_NAME_HTTP_RESPONSE = "HttpResponse";
  @SerializedName(SERIALIZED_NAME_HTTP_RESPONSE)
  private Integer httpResponse;

  /**
   * Error message type for when fx connection is lost
   */
  @JsonAdapter(ErrorMessageTypeEnum.Adapter.class)
  public enum ErrorMessageTypeEnum {
    NOCONNECTION("noConnection"),
    
    HTTPERROR("HttpError"),
    
    UNKNOWNERROR("unknownError");

    private String value;

    ErrorMessageTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ErrorMessageTypeEnum fromValue(String value) {
      for (ErrorMessageTypeEnum b : ErrorMessageTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ErrorMessageTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ErrorMessageTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ErrorMessageTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ErrorMessageTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ERROR_MESSAGE_TYPE = "ErrorMessageType";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE_TYPE)
  private ErrorMessageTypeEnum errorMessageType;

  public static final String SERIALIZED_NAME_COMMENT = "Comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;


  public ErrorData timestamp(OffsetDateTime timestamp) {
    
    this.timestamp = timestamp;
    return this;
  }

   /**
   * The timestamp of when the error occurred
   * @return timestamp
  **/
  @ApiModelProperty(required = true, value = "The timestamp of when the error occurred")

  public OffsetDateTime getTimestamp() {
    return timestamp;
  }


  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public ErrorData senderID(Long senderID) {
    
    this.senderID = senderID;
    return this;
  }

   /**
   * The ID of the node on which the error occurred
   * @return senderID
  **/
  @ApiModelProperty(example = "21", required = true, value = "The ID of the node on which the error occurred")

  public Long getSenderID() {
    return senderID;
  }


  public void setSenderID(Long senderID) {
    this.senderID = senderID;
  }


  public ErrorData httpResponse(Integer httpResponse) {
    
    this.httpResponse = httpResponse;
    return this;
  }

   /**
   * HttpResponse gotten when the error occurred
   * @return httpResponse
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "404", value = "HttpResponse gotten when the error occurred")

  public Integer getHttpResponse() {
    return httpResponse;
  }


  public void setHttpResponse(Integer httpResponse) {
    this.httpResponse = httpResponse;
  }


  public ErrorData errorMessageType(ErrorMessageTypeEnum errorMessageType) {
    
    this.errorMessageType = errorMessageType;
    return this;
  }

   /**
   * Error message type for when fx connection is lost
   * @return errorMessageType
  **/
  @ApiModelProperty(example = "HttpError", required = true, value = "Error message type for when fx connection is lost")

  public ErrorMessageTypeEnum getErrorMessageType() {
    return errorMessageType;
  }


  public void setErrorMessageType(ErrorMessageTypeEnum errorMessageType) {
    this.errorMessageType = errorMessageType;
  }


  public ErrorData comment(String comment) {
    
    this.comment = comment;
    return this;
  }

   /**
   * For further elaboration about a given error
   * @return comment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Trying to contact node 3, error code 404 was received", value = "For further elaboration about a given error")

  public String getComment() {
    return comment;
  }


  public void setComment(String comment) {
    this.comment = comment;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ErrorData errorData = (ErrorData) o;
    return Objects.equals(this.timestamp, errorData.timestamp) &&
        Objects.equals(this.senderID, errorData.senderID) &&
        Objects.equals(this.httpResponse, errorData.httpResponse) &&
        Objects.equals(this.errorMessageType, errorData.errorMessageType) &&
        Objects.equals(this.comment, errorData.comment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timestamp, senderID, httpResponse, errorMessageType, comment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ErrorData {\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    senderID: ").append(toIndentedString(senderID)).append("\n");
    sb.append("    httpResponse: ").append(toIndentedString(httpResponse)).append("\n");
    sb.append("    errorMessageType: ").append(toIndentedString(errorMessageType)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

