/*
 * Monitor Communication
 * This is a specification for the communication for the monitor system
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.Group3.monitor.model;

import java.io.IOException;
import java.util.Objects;

import org.threeten.bp.OffsetDateTime;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Contain the required data, that is needed to check timing constraints
 */
@ApiModel(description = "Contain the required data, that is needed to check timing constraints")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-03-15T10:39:25.070554+01:00[Europe/Copenhagen]")
public class TimingMonitorData {
  public static final String SERIALIZED_NAME_TIMESTAMP = "Timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_SENDER_I_D = "SenderID";
  @SerializedName(SERIALIZED_NAME_SENDER_I_D)
  private Long senderID;

  public static final String SERIALIZED_NAME_TARGET_ENDPOINT = "TargetEndpoint";
  @SerializedName(SERIALIZED_NAME_TARGET_ENDPOINT)
  private String targetEndpoint;

  public static final String SERIALIZED_NAME_EVENT_I_D = "EventID";
  @SerializedName(SERIALIZED_NAME_EVENT_I_D)
  private Long eventID;

  /**
   * Describes the event that triggered the generation of a timing event
   */
  @JsonAdapter(EventCodeEnum.Adapter.class)
  public enum EventCodeEnum {
    SENDREQUEST("SendRequest"),
    
    RECEIVERESPONSE("ReceiveResponse"),
    
    RECEIVEREQUEST("ReceiveRequest"),
    
    SENDRESPONSE("SendResponse");

    private String value;

    EventCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EventCodeEnum fromValue(String value) {
      for (EventCodeEnum b : EventCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EventCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EventCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EventCodeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EVENT_CODE = "EventCode";
  @SerializedName(SERIALIZED_NAME_EVENT_CODE)
  private EventCodeEnum eventCode;


  public TimingMonitorData timestamp(OffsetDateTime timestamp) {
    
    this.timestamp = timestamp;
    return this;
  }

   /**
   * The timestamp of the triggering a event
   * @return timestamp
  **/
  @ApiModelProperty(required = true, value = "The timestamp of the triggering a event")

  public OffsetDateTime getTimestamp() {
    return timestamp;
  }


  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public TimingMonitorData senderID(Long senderID) {
    
    this.senderID = senderID;
    return this;
  }

   /**
   * The ID of the sender of the monitoring data
   * @return senderID
  **/
  @ApiModelProperty(example = "21", required = true, value = "The ID of the sender of the monitoring data")

  public Long getSenderID() {
    return senderID;
  }


  public void setSenderID(Long senderID) {
    this.senderID = senderID;
  }


  public TimingMonitorData targetEndpoint(String targetEndpoint) {
    
    this.targetEndpoint = targetEndpoint;
    return this;
  }

   /**
   * The target endpoint of a client side request
   * @return targetEndpoint
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "/example/target/endpoint", value = "The target endpoint of a client side request")

  public String getTargetEndpoint() {
    return targetEndpoint;
  }


  public void setTargetEndpoint(String targetEndpoint) {
    this.targetEndpoint = targetEndpoint;
  }


  public TimingMonitorData eventID(Long eventID) {
    
    this.eventID = eventID;
    return this;
  }

   /**
   * The unique ID of the event chain
   * @return eventID
  **/
  @ApiModelProperty(example = "57", required = true, value = "The unique ID of the event chain")

  public Long getEventID() {
    return eventID;
  }


  public void setEventID(Long eventID) {
    this.eventID = eventID;
  }


  public TimingMonitorData eventCode(EventCodeEnum eventCode) {
    
    this.eventCode = eventCode;
    return this;
  }

   /**
   * Describes the event that triggered the generation of a timing event
   * @return eventCode
  **/
  @ApiModelProperty(example = "SendRequest", required = true, value = "Describes the event that triggered the generation of a timing event")

  public EventCodeEnum getEventCode() {
    return eventCode;
  }


  public void setEventCode(EventCodeEnum eventCode) {
    this.eventCode = eventCode;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimingMonitorData timingMonitorData = (TimingMonitorData) o;
    return Objects.equals(this.timestamp, timingMonitorData.timestamp) &&
        Objects.equals(this.senderID, timingMonitorData.senderID) &&
        Objects.equals(this.targetEndpoint, timingMonitorData.targetEndpoint) &&
        Objects.equals(this.eventID, timingMonitorData.eventID) &&
        Objects.equals(this.eventCode, timingMonitorData.eventCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timestamp, senderID, targetEndpoint, eventID, eventCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimingMonitorData {\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    senderID: ").append(toIndentedString(senderID)).append("\n");
    sb.append("    targetEndpoint: ").append(toIndentedString(targetEndpoint)).append("\n");
    sb.append("    eventID: ").append(toIndentedString(eventID)).append("\n");
    sb.append("    eventCode: ").append(toIndentedString(eventCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

